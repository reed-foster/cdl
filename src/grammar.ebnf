(*
    grammar.ebnf - Reed Foster
    formal definition of CDL's syntax
*)

(* Component definition - with indentation for better readability *)
component = component_declaration, LBRACE, component_body, RBRACE;
    component_declaration = "component", identifier;
    component_body = port, {(generic_declaration | arch)};
        port = "port", LBRACE, {port_declaration}, RBRACE;
            port_declaration = PORTDIR, TYPE, identifier, EOL;
        generic_declaration = TYPE, identifier, EOL;
        arch = "arch", [identifier], LBRACE, arch_body, RBRACE;
            arch_body = {(signal_declaration | signal_assignment | component_instantiation | connect | process | generate)};
                signal_declaration = "signal", TYPE, identifier, EOL;
                signal_assignment = identifier, SIGASSIGN, expression, EOL;
                component_instantiation = identifier, identifier, ASSIGN, "new", identifier, LPAREN, generic_list, RPAREN, EOL;
                    generic_list = generic_assign, {(",", generic_assign)};
                        generic_assign = [identifier ASSIGN] constant;

identifier = ID {(".", ID)};
constant = BOOLCONST | BININTCONST | HEXINTCONST | DECINTCONST | BINVECCONST | HEXVECCONST | ID;

(* Expression definition *)
expression = boolexpr [TERNQ expression TERNSEP expression];
boolexpr = boolfactor [boolop boolexpr];
boolfactor = [NOT] relation;
relation = BOOLCONST | (sum [relop sum]);
sum = product [(addop | bitwiseadd) sum];
product = factor [(mulop | bitwisemul) product];
factor = (SUB | BITWISENOT) factor | power;
power = term [EXP power];
term = constant | LPAREN expression RPAREN;

(* TODO: define connect, process, and generate blocks *)