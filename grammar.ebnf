(*
    grammar.ebnf - Reed Foster
    formal definition of CDL's syntax
*)

(* Component definition - with indentation for better readability *)
component = component_declaration, LBRACE, component_body, RBRACE;
    component_declaration = "component", identifier;
    component_body = port, {(generic_declaration | arch)};
        port = "port", LBRACE, {port_declaration}, RBRACE;
            port_declaration = portdir, type, identifier, EOL;
        generic_declaration = type, identifier, EOL;
        arch = "arch", [identifier], LBRACE, arch_body, RBRACE;
            arch_body = {(signal_declaration | signal_assignment | component_instantiation | process | generate)};
                signal_declaration = "signal", type, identifier, EOL;
                signal_assignment = identifier, SIGASSIGN, expression, EOL;
                component_instantiation = identifier, identifier, ASSIGN, "new", identifier, LPAREN, generic_list, RPAREN, EOL;
                    generic_list = generic_assign, {(COMMA, generic_assign)};
                        generic_assign = [identifier ASSIGN], constant;
                process = "process", LPAREN, sensitivity_list, RPAREN, LBRACE, process_body, RBRACE;
                    sensitivity_list = identifier, {(COMMA, identifier)};
                    process_body = {(variable_declaration | variable_assignment | signal_assignment | conditional_block | for_loop | while_loop)};
                        variable_declaration = "variable", type, identifier, EOL;
                        variable_assigment = identifier, VARASSIGN, expression, EOL;
                        conditional_block = "if", LPAREN, boolexpr, RPAREN, LBRACE, [process_body], RBRACE, [("else", (conditional_block | LBRACE, [process_body], RBRACE)];
                        for_loop = "for", LPAREN, variable_declaration, EOL, boolexpr, EOL, expression, RPAREN, LBRACE, [process_body], RBRACE;
                        while_loop = "while", LPAREN, boolexpr, RPAREN, LBRACE, [process_body], RBRACE;
                generate = generate_if | generate_for;
                    generate_if = "generate", "if", LPAREN, boolexpr, RPAREN, LBRACE, [generate_body], RBRACE;
                    generate_for = "generate", "for", LPAREN, variable_declaration, EOL, boolexpr, EOL, expression, RPAREN, LBRACE, [generate_body], RBRACE;
                        generate_body = {signal_assignment}; (* This needs to be more restrictive I think *)

identifier = ID, {(PERIOD, ID)};
constant = BOOLCONST | BININTCONST | HEXINTCONST | DECINTCONST | BINVECCONST | HEXVECCONST | ID;
portdir = "input" | "output";
type = "int" | "vec" | "bool";
boolop = OR | AND | XOR;
relop = LT | GT | LE | GE | EQ | NE;
addop = ADD | SUB;
bitwiseadd = "or" | "nor";
mulop = MUL | DIV | MOD;
bitwisemul = "and" | "nand" | "xor" | "xnor";

(* Expression definition *)
expression = (boolexpr, TERNQ, expression, TERNSEP, expression) | sum;
boolexpr = boolfactor, [boolop, boolexpr];
boolfactor = [NOT], (relation | BOOLCONST | identifier);
relation = sum, relop, sum;
sum = product, [(addop | bitwiseadd), sum];
product = factor, [(mulop | bitwisemul), product];
factor = (SUB | BITWISENOT), factor | power;
power = term, [EXP, power];
term = constant | LPAREN, expression, RPAREN;
